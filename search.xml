<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo next 设置]]></title>
    <url>%2F2017%2F08%2F19%2Fhexo-next%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Javascript 菜鸟教程]]></title>
    <url>%2F2017%2F08%2F15%2FJavascript%2F</url>
    <content type="text"><![CDATA[JavaScript 基础JavaScript 教程JavaScript 简介JavaScript 用法JavaScript 输出JavaScript 语法 JavaScript 语句 JavaScript 语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。 1.JavaScript 语句 下面的 JavaScript 语句向 id=”demo” 的 HTML 元素输出文本 “你好 Dolly” ： 1document.getElementById(&quot;demo&quot;).innerHTML = &quot;你好 Dolly&quot;; 分号用于分隔 JavaScript 语句。通常我们在每条可执行的语句结尾添加分号。使用分号的另一用处是在一行中编写多条语句： 12345a = 5;b = 6;c = a + b;以上实例也可以这么写:a = 5; b = 6; c = a + b; 3.JavaScript 代码 JavaScript 代码是 JavaScript 语句的序列。浏览器按照编写顺序依次执行每条语句。 本例向网页输出一个标题和两个段落： 12document.getElementById(&quot;demo&quot;).innerHTML=&quot;你好 Dolly&quot;;document.getElementById(&quot;myDIV&quot;).innerHTML=&quot;你最近怎么样?&quot;; 4.JavaScript 代码块 JavaScript 可以分批地组合起来。代码块以左花括号开始，以右花括号结束。代码块的作用是一并地执行语句序列。 本例向网页输出一个标题和两个段落： 12345function myFunction()&#123; document.getElementById(&quot;demo&quot;).innerHTML=&quot;你好Dolly&quot;; document.getElementById(&quot;myDIV&quot;).innerHTML=&quot;你最近怎么样?&quot;;&#125; 5.JavaScript 语句标识符JavaScript 语句通常以一个 语句标识符 为开始，并执行该语句。语句标识符是保留关键字不能作为变量名使用。 下表列出了 JavaScript 语句标识符 (关键字) ： 语句 描述 break 用于跳出循环。 catch 语句块，在 try 语句块执行出错时执行 catch 语句块。 continue 跳过循环中的一个迭代。 do … while 执行一个语句块，在条件语句为 true 时继续执行该语句块。 for 在条件语句为 true 时，可以将代码块执行指定的次数。 for … in 用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。 function 定义一个函数 if … else 用于基于不同的条件来执行不同的动作。 return 退出函数 switch 用于基于不同的条件来执行不同的动作。 throw 抛出（生成）错误 。 try 实现错误处理，与 catch 一同使用。 var 声明一个变量。 while 当条件语句为 true 时，执行语句块。 6.空格JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。下面的两行代码是等效的：12var person=&quot;Hege&quot;;var person = &quot;Hege&quot;; 对代码行进行折行您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：12345document.write(&quot;你好 \世界!&quot;);不过，您不能像这样折行：document.write \ (&quot;你好世界!&quot;); 您知道吗？提示：JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。 JavaScript 注释 JavaScript 注释可用于提高代码的可读性。 1.JavaScript 注释 JavaScript 不会执行注释。我们可以添加注释来对 JavaScript 进行解释，或者提高代码的可读性。单行注释以 // 开头。 本例用单行注释来解释代码：1234// 输出标题：document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;;// 输出段落：document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;; 2.JavaScript 多行注释 多行注释以 / 开始，以 / 结尾。下面的例子使用多行注释来解释代码：1234567/*下面的这些代码会输出一个标题和一个段落并将代表主页的开始*/document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;;document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;; 3.使用注释来阻止执行 在下面的例子中，注释用于阻止其中一条代码行的执行（可用于调试）： 1234567//document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;;document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;;/*document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;;document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;;*/ 4.在行末使用注释 在下面的例子中，我们把注释放到代码行的结尾处：12var x=5; // 声明 x 并把 5 赋值给它var y=x+2; // 声明 y 并把 x+2 赋值给它 养成一个好的习惯就是写注释 123养成一个好的习惯就是写注释。方便你二次阅读，维护你的代码。如果后面项目转手，也方便别人来理解你的代码和维护你的代码。 JavaScript 变量 变量是用于存储信息的”容器”。 123var x=5;var y=6;var z=x+y; 您可以把变量看做存储数据的容器。 变量必须以字母开头 变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做） 变量名称对大小写敏感（y 和 Y 是不同的变量） JavaScript 语句和 JavaScript 变量都对大小写敏感。 当您向变量分配文本值时，应该用双引号或单引号包围这个值。当您向变量赋的值是数值时，不要使用引号。如果您用引号包围数值，该值会被作为文本来处理。 123var pi=3.14;var person=&quot;John Doe&quot;;var answer=&apos;Yes I am!&apos;; 1.声明（创建） JavaScript 变量 在 JavaScript 中创建变量通常称为”声明”变量。 我们使用 var 关键词来声明变量： 1var carname; 变量声明之后，该变量是空的（它没有值）。如需向变量赋值，请使用等号： 1carname=&quot;Volvo&quot;; 不过，您也可以在声明变量时对其赋值： 1var carname=&quot;Volvo&quot;; 在下面的例子中，我们创建了名为 carname 的变量，并向其赋值 “Volvo”，然后把它放入 id=”demo” 的 HTML 段落中： 123&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;var carname=&quot;Volvo&quot;;document.getElementById(&quot;demo&quot;).innerHTML=carname; 一个好的编程习惯是，在代码开始处，统一对需要的变量进行声明。 一条语句，多个变量您可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可： 1var lastname=&quot;Doe&quot;, age=30, job=&quot;carpenter&quot;; 声明也可横跨多行： 123var lastname=&quot;Doe&quot;,age=30,job=&quot;carpenter&quot;; Value = undefined在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。在执行过以下语句后，变量 carname 的值将是 undefined：var carname; 重新声明 JavaScript 变量 如果重新声明 JavaScript 变量，该变量的值不会丢失：在以下两条语句执行后，变量 carname 的值依然是 “Volvo”： 12var carname=&quot;Volvo&quot;; var carname; JavaScript 数据类型 字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）。 JavaScript 拥有动态类型JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：123var x; // x 为 undefinedvar x = 5; // 现在 x 为数字var x = &quot;John&quot;; // 现在 x 为字符串 JavaScript 字符串字符串是存储字符（比如 “Bill Gates”）的变量。字符串可以是引号中的任意文本。您可以使用单引号或双引号：12var carname=&quot;Volvo XC60&quot;;var carname=&apos;Volvo XC60&apos;; 您可以在字符串中使用引号，只要不匹配包围字符串的引号即可：123var answer=&quot;It&apos;s alright&quot;;var answer=&quot;He is called &apos;Johnny&apos;&quot;;var answer=&apos;He is called &quot;Johnny&quot;&apos;; JavaScript 数字JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：12var x1=34.00; //使用小数点来写var x2=34; //不使用小数点来写 极大或极小的数字可以通过科学（指数）计数法来书写：12var y=123e5; // 12300000var z=123e-5; // 0.00123 JavaScript 布尔布尔（逻辑）只能有两个值：true 或 false。12var x=true;var y=false; JavaScript 数组下面的代码创建名为 cars 的数组：1234567var cars=new Array();cars[0]=&quot;Saab&quot;;cars[1]=&quot;Volvo&quot;;cars[2]=&quot;BMW&quot;;或者 (condensed array):var cars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);或者 (literal array): 实例1var cars=[&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;]; 数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。 数组声明有四种方式：123var arr1 = new Array(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;); //这是一个预定义的数组，在创建时初始化var arr2 = [&apos;a&apos;, &apos;b&apos;,&apos; &apos;c&apos; ]; //同样是在创建时初始化，但是这种创建更为边界直观var arr3 = new Array( ); var arr4 = [ ]; //这两种是创建空的数组 在数组操作中，最值得注意的是下标的使用，容易出错 JavaScript 对象对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：对象的创建，一般推荐使用这种方法12var person = &#123;firstname:&quot;John&quot;, lastname:&quot;Doe&quot;, id:5566&#125;;var perple = &#123;name : &apos;Tom&apos;, age : 21 , eat : function()&#123; &#125; &#125; 上面第一个例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。空格和折行无关紧要。声明可横跨多行： 12345var person=&#123; firstname : &quot;John&quot;, lastname : &quot;Doe&quot;, id : 5566&#125;; 也可先创建对象再追加属性和方法1234var people = new Ojbect();people.name = &quot;Tom&quot;; people.age = 21; people.eat = function()&#123; &#125; 对象属性有两种寻址方式：12name=person.lastname;name=person[&quot;lastname&quot;]; Undefined 和 NullUndefined 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。12cars=null;person=null; 声明变量类型当您声明新变量时，可以使用关键词 “new” 来声明其类型：12345var carname=new String;var x= new Number;var y= new Boolean;var cars= new Array;var person= new Object; lamp JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。 JavaScript 对象 JavaScript 对象是拥有属性和方法的数据。 真实生活中的对象，属性和方法真实生活中，一辆汽车是一个对象。对象有它的属性，如重量和颜色等，方法有启动停止等: 对象 属性 方法 car.name = Fiatcar.model = 500car.weight = 850kgcar.color = white car.start()car.drive()car.brake()car.stop 所有汽车都有这些属性，但是每款车的属性都不尽相同。所有汽车都拥有这些方法，但是它们被执行的时间都不尽相同。 JavaScript 对象在 JavaScript中，几乎所有的事物都是对象。 在 JavaScript 中，对象是非常重要的，当你理解了对象，就可以了解 JavaScript。 以下代码为变量 car 设置值为 “Fiat” :1var car = &quot;Fiat&quot;; 对象也是一个变量，但对象可以包含多个值（多个变量）。1var car = &#123;type:&quot;Fiat&quot;, model:500, color:&quot;white&quot;&#125;; 在以上实例中，3 个值 (“Fiat”, 500, “white”) 赋予变量 car。在以上实例中，3 个变量 (type, model, color) 赋予变量 car。 JavaScript 对象是变量的容器。 对象定义你可以使用字符来定义和创建 JavaScript 对象:1var person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;; 定义 JavaScript 对象可以跨越多行，空格跟换行不是必须的：123456var person = &#123; firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;; 对象属性可以说 “JavaScript 对象是变量的容器”。但是，我们通常认为 “JavaScript 对象是键值对的容器”。键值对通常写法为 name : value (键与值以冒号分割)。键值对在 JavaScript 对象通常称为 对象属性。 JavaScript 对象是属性变量的容器。 对象键值对的写法类似于：1.PHP 中的关联数组2.Python 中的字典3.C 语言中的哈希表4.Java 中的哈希映射5.Ruby 和 Perl 中的哈希表 访问对象属性你可以通过两种方式访问对象属性:1234法一：person.lastName;法二：person[&quot;lastName&quot;]; 对象方法对象的方法定义了一个函数，并作为对象的属性存储。对象方法通过添加 () 调用 (作为一个函数)。该实例访问了 person 对象的 fullName() 方法:name = person.fullName();1.创建和使用对象方法。2.对象方法作为一个函数定义存储在对象属性中。12345678910111213var person = &#123; firstName: &quot;John&quot;, lastName : &quot;Doe&quot;, id : 5566, fullName : function() &#123; return this.firstName + &quot; &quot; + this.lastName; &#125;&#125;;document.getElementById(&quot;demo&quot;).innerHTML = person.fullName();结果：John Doe 如果你要访问 person 对象的 fullName 属性，它将作为一个定义函数的字符串返回：name = person.fullName;1.创建和使用对象方法。2.对象方法是一个函数定义,并作为一个属性值存储。123456789101112131415var person = &#123; firstName: &quot;John&quot;, lastName : &quot;Doe&quot;, id : 5566, fullName : function() &#123; return this.firstName + &quot; &quot; + this.lastName; &#125;&#125;;document.getElementById(&quot;demo1&quot;).innerHTML = &quot;不加括号输出函数表达式：&quot; + person.fullName;document.getElementById(&quot;demo2&quot;).innerHTML = &quot;加括号输出函数执行结果：&quot; + person.fullName();结果：不加括号输出函数表达式：function () &#123; return this.firstName + &quot; &quot; + this.lastName; &#125;加括号输出函数执行结果：John Doe JavaScript 对象是属性和方法的容器。 访问对象方法你可以使用以下语法创建对象方法：1methodName : function() &#123; code lines &#125; 你可以使用以下语法访问对象方法：1objectName.methodName() 通常 fullName() 是作为 person 对象的一个方法， fullName 是作为一个属性。有多种方式可以创建，使用和修改 JavaScript 对象。同样也有多种方式用来创建，使用和修改属性和方法。 更多实例创建 JavaScript 对象12345678910111213法一：一行var person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;;法二：多行var person = &#123; firstName : &quot;John&quot;, lastName : &quot;Doe&quot;, age : 50, eyeColor : &quot;blue&quot;&#125;;document.getElementById(&quot;demo&quot;).innerHTML = person.firstName + &quot; 现在 &quot; + person.age + &quot; 岁。&quot;;结果：John 现在 50 岁. 访问对象属性有两种方式可以访问对象属性：.property 或 [“property”].12345678910111213var person = &#123; firstName : &quot;John&quot;, lastName : &quot;Doe&quot;, id : 5566&#125;;法一：.propertydocument.getElementById(&quot;demo&quot;).innerHTML = person.firstName + &quot; &quot; + person.lastName;法二：[&quot;property&quot;]document.getElementById(&quot;demo&quot;).innerHTML = person[&quot;firstName&quot;] + &quot; &quot; + person[&quot;lastName&quot;];结果：John Doe 函数属性作为一个方法访问创建和使用对象方法。对象方法作为一个函数定义存储在对象属性中。123456789101112131415var person = &#123; firstName: &quot;John&quot;, lastName : &quot;Doe&quot;, id : 5566, fullName : function() &#123; return this.firstName + &quot; &quot; + this.lastName; &#125;&#125;;document.getElementById(&quot;demo&quot;).innerHTML = person.fullName();结果：John Doe 函数属性作为一个属性访问创建和使用对象方法。对象方法是一个函数定义,并作为一个属性值存储。123456789101112131415var person = &#123; firstName: &quot;John&quot;, lastName : &quot;Doe&quot;, id : 5566, fullName : function() &#123; return this.firstName + &quot; &quot; + this.lastName; &#125;&#125;;document.getElementById(&quot;demo1&quot;).innerHTML = &quot;不加括号输出函数表达式：&quot; + person.fullName;document.getElementById(&quot;demo2&quot;).innerHTML = &quot;加括号输出函数执行结果：&quot; + person.fullName();结果：不加括号输出函数表达式：function () &#123; return this.firstName + &quot; &quot; + this.lastName; &#125;加括号输出函数执行结果：John Doe 总结1.JavaScript对象:属性和方法的容器;2.对象的属性之间一定要用逗号隔开;3.对象的方法定义了一个函数，并作为对象的属性存储。4.对象方法通过添加 () 调用 (作为一个函数)。 JavaScript 函数]]></content>
  </entry>
  <entry>
    <title><![CDATA[github账号添加SSH key]]></title>
    <url>%2F2017%2F07%2F17%2Fadd-SSH-Keys%2F</url>
    <content type="text"><![CDATA[生成SSH key终端输入ssh-keygen -t rsa -C “username”1ssh-keygen -t rsa -C &quot;username&quot; (注：username为你git上的用户名) 如果执行成功。返回12Generating public/private rsa key pair.Enter file in which to save the key (/Users/username/.ssh/id_rsa): 首先，说明一下，这里的username是你电脑上的用户名然后，在这里就是设置存储地址了.我们直接按回车，会出现一下两种情况的一种：（1）如果正常运行的话，会出现1Enter passphrase (empty for no passphrase): 然后我们直接回车（2）有的时候我们可能会出现12/Users/your username/.ssh/id_rsa already exists.Overwrite (y/n)? 这说明你已经设置了存储地址，我们输入“y”覆盖1Overwrite (y/n)? y 回车出现again上面的任意两种情况之后，会出现1Enter same passphrase again: 再次回车，生成成功：1234567891011121314151617Your identification has been saved in /Users/username/.ssh/id_rsa.Your public key has been saved in /Users/username/.ssh/id_rsa.pub.The key fingerprint is:58:42:8b:58:ad:4b:b5:b9:6d:79:bf:8c:f9:e2:2b:ed usernameThe key&apos;s randomart image is:+--[ RSA 2048]----+| ... || o oo. || . .ooo. || o o+ || . ..oS. || . . + . || . o . || . o+. || +E++. |+-----------------+ 这说明SSH key就已经生成了。文件目录就是：/Users/username/.ssh/id_rsa.pub.我们执行cat命令查看文件的内容：1cat /User/username/.ssh/id_rsa.pub 这时候会看见：1ssh-rsa AAAAB3NzaC1yc2... 后面的内容我省略了(说明：ssh-rsa 后面的内容这就是你的SSH keys)把显示出来的SSH keys直接添加到github账户设置里边的SSH keys最后再执行git clone命令就可以了 使用git遇到的问题我们在使用git clone 或其他命令的时候，有时候会遇到这类问题，如：1234567fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.fatal: Could not read from remote repository.Please make sure you have the correct access rights and the repository exists. 出现这个问题是因为没有在github账号添加SSH key，按上面的步骤添加就可以了~]]></content>
  </entry>
  <entry>
    <title><![CDATA[教你用Hexo+Github 搭建属于自己的博客]]></title>
    <url>%2F2017%2F07%2F14%2Fhexo-github%2F</url>
    <content type="text"><![CDATA[大概可以分为以下几个步骤 搭建环境准备（包括node.js和git环境，gitHub账户的配置） 安装Hexo 配置Hexo 怎样将Hexo与github page 联系起来 怎样发布文章 主题 推荐 主题Net的简单配置 添加sitemap和feed插件 添加404 公益页面 搭建环境准备&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大概可以分为以下三步 Node.js 的安装和准备 git的安装和准备 gitHub账户的配置 配置Node.js环境&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载Node.js安装文件： Windows Installer 32-bitWindows Installer 64-bit根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧- -。 如图所示： 保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了 配置Git环境github账户的注册和配置创建代码库登陆之后，点击页面右上角的加号，选择New repository： 新建代码库进入代码库创建页面：在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示： 注意：比如我的github名称是jj ,这里你就填 jj.github.io,如果你的名字是sunny，那你就填 sunny.github.io 代码库设置正确创建之后，你将会看到如下界面： 接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，选择theme，生成访问地址，如图： 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。到此搭建hexo博客的相关环境配置已经完成，下面开始讲解Hexo的相关配置 安装Hexo在自己认为合适的地方创建一个文件夹，并在命令行的窗口进入到该目录 设置npm淘宝镜像站1.npm默认的源的下载速度可能很慢，建议使用淘宝镜像替换。2.执行下面的命令，将npm的源设置成淘宝镜像站。 12345npm config set registry &quot;https://registry.npm.taobao.org&quot;或者npm install -g cnpm --registry=https://registry.npm.taobao.org 执行以下命令安装hexo。123456789101112# 安装hexonpm install hexo-cli g# 在博客文件夹blog中初始化hexohexo init# 安装hexo的扩展插件npm install或者sudo cnpm install hero-cli -ghexo initsudo cnpm install 首次体验Hexo继续操作，同样是在命令行中，输入：1234# 生成静态页面hexo generate# 开启本地服务器hexo server 然后会提示： INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.在浏览器中打开http://localhost:4000/，你将会看到你的博客~ 到目前为止，Hexo在本地的配置已经全都结束了。下面会讲解怎样将Hexo与github page 联系起来 怎样将Hexo与github page 联系起来大概分为以下几步 配置git个人信息配置Deployment 配置Git个人信息如果你之前已经配置好git个人信息，请跳过这一个 步骤，直接来到 设置Git的user name和email：(如果是第一次的话)12git config --global user.name &quot;xx&quot;git config --global user.email &quot;xxx@163.com&quot; 生成密钥1ssh-keygen -t rsa -C &quot;xxx@163.com&quot; 配置Deployment同样在_config.yml文件中，找到Deployment，然后按照如下修改：1234567deploy: # 类型 type: git # 仓库 repo: git@github.com:yourname/yourname.github.io.git # 分支 branch: master 比如我的仓库的地址是git@github.com:sunny/sunny.github.io.git，所以配置如下 1234deploy: type: git repo: git@github.com:sunny/sunny.github.io.git branch: master 写博客、发布文章输入下面的命令新建一篇博客，并将hexo博客部署到github中12345678# 新建一篇文章hexo new &quot;article title&quot;# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy 这时候在我的 电脑的目录下 \hexo\source\ _posts 将会看到 article title.md 文件，用MarDown编辑器打开就可以编辑文章了 hexo命令缩写12345678#生成静态页面hexo g：hexo generate # 清空静态页面hexo c：hexo clean# 开启本地服务器hexo s：hexo server# 部署 hexo d：hexo deploy 当然你也可以执行下面的命令，相当于上面两条命令的效果123456789# 清除、生成、启动hexo clean &amp;&amp; hexo g -s# 清除、生成、部署hexo clean &amp;&amp; hexo g -d# 生成、启动hexo g -s# 生成、部署hexo g -dhexo d -g 部署成功后访问 你的地址，https://yourName.github.io（这里输入我的地址： https://sunny-jj.github.io ),将可以看到生成的文章。 常见问题hexo deploy没有反应？修改配置文件：_config.yml时，冒号后面没加空格。 hexo s 网站打不开？端口占用，换个端口就好了。执行命令hexo s -p 5000，并在浏览器地址栏输入http://localhost:5000，回车访问。 如何换主题？将主题下载后，放到themes文件夹中即可。例如，下面命令安装next主题：git clone https://github.com/iissnan/hexo-theme-next themes/nexthttp://theme-next.iissnan.com/getting-started.html#sidebar-settings hexo3.0以上版本问题搭建 hexo，在执行 hexo deploy 后,出现 error deployer not found:github 的错误1.deploy的type 的github需要改成git2.npm install hexo-deployer-git –save 改了之后执行，然后再部署]]></content>
  </entry>
  <entry>
    <title><![CDATA[markdown]]></title>
    <url>%2F2014%2F08%2F12%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[斜体和粗体代码：1234*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~ 显示效果：粗体加粗斜体删除线 分级标题 #index第一种写法： 1234这是一个一级标题============================这是一个二级标题-------------------------------------------------- 第二种写法：123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 超链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。 行内式语法说明 [ ]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接文字’这样的形式。链接地址与链接标题前有一个空格。 代码：12欢迎来到[sunny-jj](https://sunny-jj.github.io)欢迎来到[sunny-jj](https://sunny-jj.github.io &quot;sunny-jj&quot;) 显示效果：欢迎来到sunny-jj欢迎来到sunny-jj 参考式 参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。 语法说明： 参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。 如果链接文字本身可以做为链接标记，你也可以写成[链接文字][][链接文字]：链接地址的形式，见代码的最后一行。 代码： 123456我经常去的几个网站[Google][1]、[Baidu][2]以及[自己的博客][3][Leanote 笔记][2]是一个不错的[网站][]。[1]:http://www.google.com &quot;Google&quot;[2]:https://www.baidu.com/ &quot;Baidu&quot;[3]:https://sunny-jj.github.io &quot;sunny-jj&quot;[网站]:https://sunny-jj.github.io 显示效果：我经常去的几个网站Google、Leanote以及自己的博客Leanote 笔记是一个不错的网站。 自动链接语法说明： Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 代码：12&lt;http://example.com/&gt;&lt;address@example.com&gt; 显示效果：http://example.com/&#x61;&#100;&#100;&#114;&#101;&#115;&#x73;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d; 锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。 注意： Markdown Extra 只支持在标题后插入锚点，其它地方无效。 Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。 语法描述： 在你准备跳转到的指定标题后插入锚点 #标记，然后在文档的其它地方写上连接到锚点的链接。 代码：12## 0. 分级标题 #index跳转到[分级标题11](#index) 跳转到分级标题 列表无序列表 使用 *，+，- 表示无序列表。 代码：123- 无序列表项 一- 无序列表项 二- 无序列表项 三 显示效果： 无序列表项 一 无序列表项 二 无序列表项 三 有序列表 有序列表则使用数字接着一个英文句点。 代码：1231. 有序列表项 一2. 有序列表项 二3. 有序列表项 三 显示效果： 有序列表项 一 有序列表项 二 有序列表项 三 定义型列表语法说明： 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab) 代码：12345Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 显示效果： Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 列表缩进语法说明： 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）： 列表列表 代码：12* 列表列表 显示效果： 列表列表 包含引用的列表语法说明： 如果要在列表项目内放进引用，那 &gt; 就需要缩进： 代码：123* 阅读的方法: &gt; 打开书本。 &gt; 打开电灯。 显示效果： 阅读的方法: 打开书本。打开电灯。 包含代码区块的引用语法说明： 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符： 一列表项包含一个列表区块： 1&lt;代码写在这&gt; 一个特殊情况 在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法： 11986. What a great season. 会显示成： What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠： 11986\. What a great season. 会显示成：* 1986. What a great season. 引用语法说明： 引用需要在被引用的文本前加上&gt;符号。 代码：123456&gt; 这是一个有两段文字的引用,&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt; &gt; 无意义的占行文字3.&gt; 无意义的占行文字4. 显示效果： 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2. 无意义的占行文字3.无意义的占行文字4. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： 代码：12345&gt; 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2.&gt; 无意义的占行文字3.无意义的占行文字4. 显示效果： 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2.无意义的占行文字3.无意义的占行文字4. 引用的多层嵌套 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 代码：123&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白&gt;&gt; 自己看教程！ - 愤青&gt; 教程在哪？ - 小白 显示效果： 请问 Markdwon 怎么用？ - 小白自己看教程！ - 愤青教程在哪？ - 小白 引用其它要素 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 代码：123456&gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 显示效果： 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 插入图像 图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。 语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。 行内式 语法说明：!图片Alt 代码：12我的博客logo： ![我的博客logo](http://localhost:4000/img/logo.svg &quot;我的博客logo&quot;) 显示效果： 我的博客logo： 参考式语法说明： 在文档要插入图片的地方写![图片Alt][标记] 在文档的最后写上[标记]:图片地址 “Title” 代码：123我的博客logo:![我的博客logo][logo][logo]:http://localhost:4000/img/logo.svg &quot;我的博客logo&quot; 显示效果： 内容目录 在段落中填写 [TOC] 以显示全文内容的目录结构。 效果参见最上方的目录 注脚语法说明： 在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。 代码：1234使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文 显示效果：使用 Markdown^1可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote^Le 编辑器进行书写。 [^2]:HyperText Markup Language 超文本标记语言 LaTeX 公式$ 表示行内公式：代码：1质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 显示效果： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 ###$$ 表示整行公式： 代码：123$$\sum_&#123;i=1&#125;^n a_i=0$$$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$$$\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;$$ 显示效果：$$\sum_{i=1}^n a_i=0$$$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + xn^2 $$$$\sum^{j-1}{k=0}{\widehat{\gamma}_{kj} z_k}$$ 访问 MathJax 参考更多使用方法。 流程图代码：12345678910flowst=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io 显示效果：flowst=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io 更多语法参考：流程图语法参考 表格语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。 代码： 简单方式写表格：12345学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 原生方式写表格：12345|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92| 为表格第二列指定方向：1234产品|价格-|-:Leanote 高级账号|60元/年Leanote 超级账号|120元/年 显示效果： 简单方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 原生方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 为表格第二列指定方向： 产品 价格 Leanote 高级账号 60元/年 Leanote 超级账号 120元/年 分隔线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 代码：12345* * *********- - ---------------------------------------- 显示效果都一样： 代码 对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。 语法说明： 插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。插入多行代码，可以使用缩进或者“code “,具体看示例。注意： 缩进式插入前方必须有空行 行内式代码：1C语言里的函数 `scanf()` 怎么使用？ 显示效果： C语言里的函数 scanf() 怎么使用？ 缩进式多行代码缩进 4 个空格或是 1 个制表符 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 代码：12345#include &lt;stdio.h&gt;int main(void)&#123; printf(&quot;Hello world\n&quot;);&#125; 显示效果： #include int main(void) { printf(“Hello world\n”); } 用六个`包裹多行代码代码：12345#include &lt;stdio.h&gt;int main(void)&#123; printf(&quot;Hello world\n&quot;);&#125; 显示效果： #include int main(void){ printf(“Hello world\n”);} 表格1234First Header | Second Header | Third Header------------ | ------------- | ------------Content Cell | Content Cell | Content CellContent Cell | Content Cell | Content Cell 显示效果： First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell 或者也可以让表格两边内容对齐，中间内容居中，例如： 1234First Header | Second Header | Third Header:----------- | :-----------: | -----------:Left | Center | RightLeft | Center | Right 显示效果： First Header Second Header Third Header Left Center Right Left Center Right]]></content>
  </entry>
</search>
